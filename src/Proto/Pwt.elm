{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Pwt exposing (Complex, Role(..), Simple, Token, decodeComplex, decodeRole, decodeSimple, decodeToken, defaultComplex, defaultRole, defaultSimple, defaultToken, encodeComplex, encodeRole, encodeSimple, encodeToken, fieldNumbersComplex, fieldNumbersRole, fieldNumbersSimple, fieldNumbersToken, fromInternalRole, toInternalRole)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 3.2.0
- `protoc` 3.19.0
- the following specification files: `pwt.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.


@docs Complex, Role, Simple, Token, decodeComplex, decodeRole, decodeSimple, decodeToken, defaultComplex, defaultRole, defaultSimple, defaultToken
@docs encodeComplex, encodeRole, encodeSimple, encodeToken, fieldNumbersComplex, fieldNumbersRole, fieldNumbersSimple, fieldNumbersToken
@docs fromInternalRole, toInternalRole
-}

import Proto.Pwt.Internals_
import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Complex`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersComplex : { validUntil : Int, userId : Int, userName : Int, email : Int, roles : Int }
fieldNumbersComplex =
    Proto.Pwt.Internals_.fieldNumbersProto__Pwt__Complex


{-| Default for Complex. Should only be used for 'required' decoders as an initial value.


-}
defaultComplex : Complex
defaultComplex =
    Proto.Pwt.Internals_.defaultProto__Pwt__Complex


{-| Declares how to decode a `Complex` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeComplex : Protobuf.Decode.Decoder Complex
decodeComplex =
    Proto.Pwt.Internals_.decodeProto__Pwt__Complex


{-| Declares how to encode a `Complex` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeComplex : Complex -> Protobuf.Encode.Encoder
encodeComplex =
    Proto.Pwt.Internals_.encodeProto__Pwt__Complex


{-| `Complex` message


-}
type alias Complex =
    Proto.Pwt.Internals_.Proto__Pwt__Complex


{-| The field numbers for the fields of `Simple`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersSimple : { someClaim : Int }
fieldNumbersSimple =
    Proto.Pwt.Internals_.fieldNumbersProto__Pwt__Simple


{-| Default for Simple. Should only be used for 'required' decoders as an initial value.


-}
defaultSimple : Simple
defaultSimple =
    Proto.Pwt.Internals_.defaultProto__Pwt__Simple


{-| Declares how to decode a `Simple` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeSimple : Protobuf.Decode.Decoder Simple
decodeSimple =
    Proto.Pwt.Internals_.decodeProto__Pwt__Simple


{-| Declares how to encode a `Simple` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeSimple : Simple -> Protobuf.Encode.Encoder
encodeSimple =
    Proto.Pwt.Internals_.encodeProto__Pwt__Simple


{-| `Simple` message


-}
type alias Simple =
    Proto.Pwt.Internals_.Proto__Pwt__Simple


{-| The field numbers for the fields of `Token`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersToken : { validUntil : Int, claims : Int }
fieldNumbersToken =
    Proto.Pwt.Internals_.fieldNumbersProto__Pwt__Token


{-| Default for Token. Should only be used for 'required' decoders as an initial value.


-}
defaultToken : Token
defaultToken =
    Proto.Pwt.Internals_.defaultProto__Pwt__Token


{-| Declares how to decode a `Token` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeToken : Protobuf.Decode.Decoder Token
decodeToken =
    Proto.Pwt.Internals_.decodeProto__Pwt__Token


{-| Declares how to encode a `Token` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeToken : Token -> Protobuf.Encode.Encoder
encodeToken =
    Proto.Pwt.Internals_.encodeProto__Pwt__Token


{-| `Token` message


-}
type alias Token =
    Proto.Pwt.Internals_.Proto__Pwt__Token


{-| The field numbers for the fields of `Role`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersRole : Role -> Int
fieldNumbersRole n_ =
    case n_ of
        ReadFeatureFoo ->
            0

        WriteFeatureFoo ->
            1

        ReadFeatureBar ->
            2

        WriteFeatureBar ->
            3

        RoleUnrecognized_ m_ ->
            m_


{-| Default for Role. Should only be used for 'required' decoders as an initial value.


-}
defaultRole : Role
defaultRole =
    ReadFeatureFoo


{-| Convert a `Role` into its internal representation `Proto__Pwt__Role`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
toInternalRole : Role -> Proto.Pwt.Internals_.Proto__Pwt__Role
toInternalRole data_ =
    case data_ of
        ReadFeatureFoo ->
            Proto.Pwt.Internals_.Proto__Pwt__ReadFeatureFoo

        WriteFeatureFoo ->
            Proto.Pwt.Internals_.Proto__Pwt__WriteFeatureFoo

        ReadFeatureBar ->
            Proto.Pwt.Internals_.Proto__Pwt__ReadFeatureBar

        WriteFeatureBar ->
            Proto.Pwt.Internals_.Proto__Pwt__WriteFeatureBar

        RoleUnrecognized_ n_ ->
            Proto.Pwt.Internals_.Proto__Pwt__RoleUnrecognized_ n_


{-| Convert the internal type `Proto__Pwt__Role` into a `Role`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
fromInternalRole : Proto.Pwt.Internals_.Proto__Pwt__Role -> Role
fromInternalRole data_ =
    case data_ of
        Proto.Pwt.Internals_.Proto__Pwt__ReadFeatureFoo ->
            ReadFeatureFoo

        Proto.Pwt.Internals_.Proto__Pwt__WriteFeatureFoo ->
            WriteFeatureFoo

        Proto.Pwt.Internals_.Proto__Pwt__ReadFeatureBar ->
            ReadFeatureBar

        Proto.Pwt.Internals_.Proto__Pwt__WriteFeatureBar ->
            WriteFeatureBar

        Proto.Pwt.Internals_.Proto__Pwt__RoleUnrecognized_ n_ ->
            RoleUnrecognized_ n_


{-| Declares how to encode a `Role` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeRole : Role -> Protobuf.Encode.Encoder
encodeRole =
    toInternalRole >> Proto.Pwt.Internals_.encodeProto__Pwt__Role


{-| Declares how to decode a `Role` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeRole : Protobuf.Decode.Decoder Role
decodeRole =
    Protobuf.Decode.map fromInternalRole Proto.Pwt.Internals_.decodeProto__Pwt__Role


{-| `Role` enumeration


-}
type Role
    = ReadFeatureFoo
    | WriteFeatureFoo
    | ReadFeatureBar
    | WriteFeatureBar
    | RoleUnrecognized_ Int
